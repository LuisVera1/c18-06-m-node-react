// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Career {
  id       Int       @id @default(autoincrement())
  title    String
  credits  Int
  code     String    @unique
  class    Class[]
  students Student[]
  subject  Subject[]
}

model Class {
  id        Int               @id @default(autoincrement())
  title     String
  credits   Int
  spaces    Int               @default(0)
  code      String
  section   String
  schedule  Schedule[]
  carerrID  Int
  career    Career            @relation(fields: [carerrID], references: [id])
  teacherID Int?
  teacher   Teacher?          @relation(fields: [teacherID], references: [id])
  students  StudentsInClass[]
}

model Schedule {
  id        Int    @id @default(autoincrement())
  day       String
  startH    Int
  endH      Int
  classroom String
  classID   Int
  class     Class  @relation(fields: [classID], references: [id])
}

model Teacher {
  id       Int             @id @default(autoincrement())
  code     Int?            @unique
  email    String          @unique
  name     String
  password String
  role     Role            @default(Teacher)
  status   TeacherStatus   @default(Activo)
  class    Class[]
  profile  ProfileTeacher?
}

model ProfileTeacher {
  id             Int     @id @default(autoincrement())
  birthdate      String?
  phone          String?
  //identification?
  //institutional mail
  address        String?
  grade          String?
  specialization String?
  department     String?
  expertise      String?
  contact        String?
  contactPhone   String?
  teacherID      Int     @unique
  teacher        Teacher @relation(fields: [teacherID], references: [id])
}

model StudentsInClass {
  id        Int     @id @default(autoincrement())
  studentID Int
  student   Student @relation(fields: [studentID], references: [id])
  classID   Int
  class     Class   @relation(fields: [classID], references: [id])
}

model Student {
  id       Int               @id @default(autoincrement())
  email    String            @unique
  code     Int?              @unique
  name     String
  password String
  role     Role              @default(Student)
  status   StudentStatus     @default(Activo)
  careerID Int
  career   Career            @relation(fields: [careerID], references: [id])
  class    StudentsInClass[]
  subjects Subject[]
  profile  ProfileStudent?
}

model ProfileStudent {
  id           Int     @id @default(autoincrement())
  birthdate    String?
  phone        String?
  //# identification
  // institutional mail
  year         Int?
  currentCycle String?
  contact      String?
  contactPhone String?
  studentID    Int     @unique
  student      Student @relation(fields: [studentID], references: [id])
}

model Subject {
  id        Int           @id @default(autoincrement())
  title     String
  credits   Int
  code      String
  status    StatusSubject
  score     Int
  year      Int
  month     Int
  careerID  Int
  career    Career        @relation(fields: [careerID], references: [id])
  studentID Int
  student   Student       @relation(fields: [studentID], references: [id])
}

model Admin {
  id          Int         @id @default(autoincrement())
  code        Int?        @unique
  email       String      @unique
  name        String
  password    String
  status      AdminStatus @default(Activo)
  role        Role        @default(Admin)
  phone       String?
  //department
  //institutional mail
  //level
  superAdmin  Boolean     @default(false)
  manageUsers Boolean     @default(true)
  createAdmin Boolean     @default(false)
}

enum Role {
  Student
  Teacher
  Admin
}

enum StudentStatus {
  Activo
  Inactivo
  Graduado
  Titulado
  Baja
  BajaTemporal
}

enum TeacherStatus {
  Activo
  Inactivo
  Baja
}

enum AdminStatus {
  Activo
  Inactivo
  Baja
}

enum StatusSubject {
  Aprobada
  Reprobada
  Extraordinario
  Repetida
}
